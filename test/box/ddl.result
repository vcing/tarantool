env = require('test_run')
---
...
test_run = env.new()
---
...
fiber = require'fiber'
---
...
-- simple test for parallel ddl execution
_ = box.schema.space.create('test'):create_index('pk')
---
...
ch = fiber.channel(2)
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function f1()
    box.space.test:create_index('sec', {parts = {2, 'num'}})
    ch:put(true)
end;
---
...
function f2()
    box.space.test:create_index('third', {parts = {3, 'string'}})
    ch:put(true)
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
_ = {fiber.create(f1), fiber.create(f2)}
---
...
ch:get()
---
- true
...
ch:get()
---
- true
...
_ = box.space.test:drop()
---
...
test_run:cmd('restart server default')
env = require('test_run')
---
...
test_run = env.new()
---
...
fiber = require'fiber'
---
...
ch = fiber.channel(2)
---
...
--issue #928
space = box.schema.space.create('test_trunc')
---
...
_ = space:create_index('pk')
---
...
_ = box.space.test_trunc:create_index('i1', {type = 'hash', parts = {2, 'STR'}})
---
...
_ = box.space.test_trunc:create_index('i2', {type = 'hash', parts = {2, 'STR'}})
---
...
function test_trunc() space:truncate() ch:put(true) end
---
...
_ = {fiber.create(test_trunc), fiber.create(test_trunc)}
---
...
_ = {ch:get(), ch:get()}
---
...
space:drop()
---
...
-- index should not crash after alter
space = box.schema.space.create('test_swap')
---
...
index = space:create_index('pk')
---
...
space:replace({1, 2, 3})
---
- [1, 2, 3]
...
index:rename('primary')
---
...
index2 = space:create_index('sec')
---
...
space:replace({2, 3, 1})
---
- [2, 3, 1]
...
space:select()
---
- - [1, 2, 3]
  - [2, 3, 1]
...
space:drop()
---
...
ch = fiber.channel(3)
---
...
_ = box.schema.space.create('test'):create_index('pk')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function add_index()
    box.space.test:create_index('sec', {parts = {2, 'num'}})
    ch:put(true)
end;
---
...
function insert_tuple(tuple)
    ch:put({pcall(box.space.test.replace, box.space.test, tuple)})
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
_ = {fiber.create(insert_tuple, {1, 2, 'a'}), fiber.create(add_index), fiber.create(insert_tuple, {2, '3', 'b'})}
---
...
{ch:get(), ch:get(), ch:get()}
---
- - - false
    - 'Tuple field 2 type does not match one required by operation: expected unsigned'
  - - true
    - [1, 2, 'a']
  - true
...
box.space.test:select()
---
- - [1, 2, 'a']
...
test_run:cmd('restart server default')
box.space.test:select()
---
- - [1, 2, 'a']
...
box.space.test:drop()
---
...
-- gh-2336 crash if format called twice during snapshot
fiber = require'fiber'
---
...
space = box.schema.space.create('test_format')
---
...
_ = space:create_index('pk', { parts = { 1,'str' }})
---
...
space:format({{ name ="key"; type = "string" }, { name ="dataAB"; type = "string" }})
---
...
str = string.rep("t",1024)
---
...
for i = 1, 10000 do space:insert{tostring(i), str} end
---
...
ch = fiber.channel(3)
---
...
_ = fiber.create(function() fiber.yield() box.snapshot() ch:put(true) end)
---
...
format = {{name ="key"; type = "string"}, {name ="data"; type = "string"}}
---
...
for i = 1, 2 do fiber.create(function() fiber.yield() space:format(format) ch:put(true) end) end
---
...
{ch:get(), ch:get(), ch:get()}
---
- - true
  - true
  - true
...
space:drop()
---
...
-- collation
function setmap(table) return setmetatable(table, { __serialize = 'map' }) end
---
...
box.internal.collation.create('test')
---
- error: Illegal parameters, type (second arg) must be a string
...
box.internal.collation.create('test', 'ICU')
---
- error: Illegal parameters, locale (third arg) must be a string
...
box.internal.collation.create(42, 'ICU', 'ru_RU')
---
- error: Illegal parameters, name (first arg) must be a string
...
box.internal.collation.create('test', 42, 'ru_RU')
---
- error: Illegal parameters, type (second arg) must be a string
...
box.internal.collation.create('test', 'ICU', 42)
---
- error: Illegal parameters, locale (third arg) must be a string
...
box.internal.collation.create('test', 'nothing', 'ru_RU')
---
- error: 'Failed to initialize collation: unknown collation type.'
...
box.internal.collation.create('test', 'ICU', 'ru_RU', setmap{}) --ok
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU')
---
- error: Duplicate key exists in unique index 'name' in space '_collation'
...
box.internal.collation.drop('test')
---
...
box.internal.collation.drop('nothing') -- allowed
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU', 42)
---
- error: Illegal parameters, options (fourth arg) must be a table or nil
...
box.internal.collation.create('test', 'ICU', 'ru_RU', 'options')
---
- error: Illegal parameters, options (fourth arg) must be a table or nil
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {ping='pong'})
---
- error: 'Wrong collation options (field 5): unexpected option ''ping'''
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {french_collation='german'})
---
- error: 'Failed to initialize collation: ICU wrong french_collation option setting,
    expected ON | OFF.'
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {french_collation='on'}) --ok
---
...
box.internal.collation.drop('test') --ok
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {strength='supervillian'})
---
- error: 'Failed to initialize collation: ICU wrong strength option setting, expected
    PRIMARY | SECONDARY | TERTIARY | QUATERNARY | IDENTICAL.'
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {strength=42})
---
- error: 'Wrong collation options (field 5): ''strength'' must be enum'
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {strength=2}) --ok
---
- error: 'Wrong collation options (field 5): ''strength'' must be enum'
...
box.internal.collation.drop('test') --ok
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU', {strength='primary'}) --ok
---
...
box.internal.collation.drop('test') --ok
---
...
box.begin() box.internal.collation.create('test2', 'ICU', 'ru_RU')
---
- error: Space _collation does not support multi-statement transactions
...
box.rollback()
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU')
---
...
box.internal.collation.exists('test')
---
- true
...
test_run:cmd('restart server default')
function setmap(table) return setmetatable(table, { __serialize = 'map' }) end
---
...
box.internal.collation.exists('test')
---
- true
...
box.internal.collation.drop('test')
---
...
box.space._collation:auto_increment{'test'}
---
- error: Tuple field count 2 is less than required by space format or defined indexes
    (expected at least 6)
...
box.space._collation:auto_increment{'test', 0, 'ICU'}
---
- error: Tuple field count 4 is less than required by space format or defined indexes
    (expected at least 6)
...
box.space._collation:auto_increment{'test', 'ADMIN', 'ICU', 'ru_RU'}
---
- error: Tuple field count 5 is less than required by space format or defined indexes
    (expected at least 6)
...
box.space._collation:auto_increment{42, 0, 'ICU', 'ru_RU'}
---
- error: Tuple field count 5 is less than required by space format or defined indexes
    (expected at least 6)
...
box.space._collation:auto_increment{'test', 0, 42, 'ru_RU'}
---
- error: Tuple field count 5 is less than required by space format or defined indexes
    (expected at least 6)
...
box.space._collation:auto_increment{'test', 0, 'ICU', 42}
---
- error: Tuple field count 5 is less than required by space format or defined indexes
    (expected at least 6)
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', setmap{}} --ok
---
- [3, 'test', 0, 'ICU', 'ru_RU', {}]
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', setmap{}}
---
- error: Duplicate key exists in unique index 'name' in space '_collation'
...
box.space._collation.index.name:delete{'test'} -- ok
---
- [3, 'test', 0, 'ICU', 'ru_RU', {}]
...
box.space._collation.index.name:delete{'nothing'} -- allowed
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', 42}
---
- error: 'Tuple field 6 type does not match one required by operation: expected map'
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', 'options'}
---
- error: 'Tuple field 6 type does not match one required by operation: expected map'
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', {ping='pong'}}
---
- error: 'Wrong collation options (field 5): unexpected option ''ping'''
...
opts = {normalization_mode='NORMAL'}
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts}
---
- error: 'Failed to initialize collation: ICU wrong normalization_mode option setting,
    expected ON | OFF.'
...
opts.normalization_mode = 'OFF'
---
...
_ = box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts} -- ok
---
...
_ = box.space._collation.index.name:delete{'test'} -- ok
---
...
opts.numeric_collation = 'PERL'
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts}
---
- error: 'Failed to initialize collation: ICU wrong numeric_collation option setting,
    expected ON | OFF.'
...
opts.numeric_collation = 'ON'
---
...
_ = box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts} --ok
---
...
_ = box.space._collation.index.name:delete{'test'} -- ok
---
...
opts.alternate_handling1 = 'ON'
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts}
---
- error: 'Wrong collation options (field 5): unexpected option ''alternate_handling1'''
...
opts.alternate_handling1 = nil
---
...
opts.alternate_handling = 'ON'
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts}
---
- error: 'Failed to initialize collation: ICU wrong alternate_handling option setting,
    expected NON_IGNORABLE | SHIFTED.'
...
opts.alternate_handling = 'SHIFTED'
---
...
_ = box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts} --ok
---
...
_ = box.space._collation.index.name:delete{'test'} -- ok
---
...
opts.case_first = 'ON'
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts}
---
- error: 'Failed to initialize collation: ICU wrong case_first option setting, expected
    OFF | UPPER_FIRST | LOWER_FIRST.'
...
opts.case_first = 'OFF'
---
...
_ = box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts} --ok
---
...
_ = box.space._collation.index.name:delete{'test'} -- ok
---
...
opts.case_level = 'UPPER'
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts}
---
- error: 'Failed to initialize collation: ICU wrong case_level option setting, expected
    ON | OFF.'
...
opts.case_level = 'DEFAULT'
---
...
_ = box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', opts} --ok
---
- error: 'Failed to initialize collation: ICU wrong case_level option setting, expected
    ON | OFF.'
...
_ = box.space._collation.index.name:delete{'test'} -- ok
---
...
box.space._collation:auto_increment{'test', 0, 'ICU', 'ru_RU', setmap{}}
---
- [3, 'test', 0, 'ICU', 'ru_RU', {}]
...
box.space._collation:select{}
---
- - [1, 'unicode', 1, 'ICU', '', {}]
  - [2, 'unicode_ci', 1, 'ICU', '', {'strength': 'primary'}]
  - [3, 'test', 0, 'ICU', 'ru_RU', {}]
...
test_run:cmd('restart server default')
box.space._collation:select{}
---
- - [1, 'unicode', 1, 'ICU', '', {}]
  - [2, 'unicode_ci', 1, 'ICU', '', {'strength': 'primary'}]
  - [3, 'test', 0, 'ICU', 'ru_RU', {}]
...
box.space._collation.index.name:delete{'test'}
---
- [3, 'test', 0, 'ICU', 'ru_RU', {}]
...
--
-- gh-2839: allow to store custom fields in field definition.
--
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {'field2', 'unsigned'}
---
...
format[3] = {'field3', 'unsigned', custom_field = 'custom_value'}
---
...
s = box.schema.create_space('test', {format = format})
---
...
s:format()[3].custom_field
---
- custom_value
...
s:drop()
---
...
--
-- gh-2937: allow to specify collation in field definition.
--
format = {}
---
...
format[1] = {name = 'field1', type = 'string', collation = 'unicode'}
---
...
format[2] = {'field2', 'any', collation = 'unicode_ci'}
---
...
format[3] = {type = 'scalar', name = 'field3', collation = 'unicode'}
---
...
s = box.schema.create_space('test', {format = format})
---
...
s:format()
---
- [{'type': 'string', 'name': 'field1', 'collation': 1}, {'type': 'any', 'name': 'field2',
    'collation': 2}, {'type': 'scalar', 'name': 'field3', 'collation': 1}]
...
s:drop()
---
...
-- Check that collation is allowed only for stings, scalar and any types.
format = {}
---
...
format[1] = {'field1', 'unsigned', collation = 'unicode'}
---
...
s = box.schema.create_space('test', {format = format})
---
- error: 'Failed to create space ''test'': collation is reasonable only for string,
    scalar and any fields'
...
format[1] = {'field2', 'array', collation = 'unicode_ci'}
---
...
s = box.schema.create_space('test', {format = format})
---
- error: 'Failed to create space ''test'': collation is reasonable only for string,
    scalar and any fields'
...
-- Check that error is raised when collation doesn't exists.
format = {}
---
...
format[1] = {'field1', 'unsigend', collation = 'test_coll'}
---
...
s = box.schema.create_space('test', {format = format})
---
- error: 'Illegal parameters, format[1]: collation was not found by name ''test_coll'''
...
-- Check that error is raised when collation with wrong id is used.
_space = box.space[box.schema.SPACE_ID]
---
...
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
format = {{name = 'field1', type = 'string', collation = 666}}
---
...
surrogate_space = {12345, 1, 'test', 'memtx', 0, EMPTY_MAP, format}
---
...
_space:insert(surrogate_space)
---
- error: 'Wrong collation options (field 1): collation was not found by ID'
...
--
-- gh-2783
-- A ddl operation shoud fail before trying to lock a ddl latch
-- in a multi-statement transaction.
-- If operation tries to lock already an locked latch then the
-- current transaction will be silently rolled back under our feet.
-- This is confusing. So check for multi-statement transaction
-- before locking the latch.
--
test_latch = box.schema.space.create('test_latch')
---
...
_ = test_latch:create_index('primary', {unique = true, parts = {1, 'unsigned'}})
---
...
fiber = require('fiber')
---
...
c = fiber.channel(1)
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
_ = fiber.create(function()
    test_latch:create_index("sec", {unique = true, parts = {2, 'unsigned'}})
    c:put(true)
end);
---
...
box.begin()
test_latch:create_index("sec2", {unique = true, parts = {2, 'unsigned'}})
box.commit();
---
- error: DDL does not support multi-statement transactions
...
test_run:cmd("setopt delimiter ''");
---
- true
...
_ = c:get()
---
...
test_latch:drop() -- this is where everything stops
---
...
